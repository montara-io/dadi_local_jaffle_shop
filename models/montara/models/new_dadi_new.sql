-- AUTO GENERATED BY MONTARA
--<DBT_CODE>


SELECT
customer_data.*
, MIN(first_actions.first_organic_platform_visit_user) OVER (PARTITION BY customer_id) organic_first_documented_action_at
, MIN(first_actions.bw_first_platform_visit_user) OVER (PARTITION BY customer_id) bw_first_documented_action_at
, MIN(first_actions.cs_first_platform_visit_user) OVER (PARTITION BY customer_id) cs_first_documented_action_at
, MIN(first_actions.first_engage_action) OVER (PARTITION BY customer_id) engage_first_documented_action_at
, bw_latest_cycle_start_date
, bw_latest_cycle_end_date
, bw_latest_score_generated_date
, bw_latest_scores_report_created_date
, cs_latest_cycle_start_date
, cs_latest_cycle_end_date
, cs_latest_score_generated_date
, cs_latest_scores_report_created_date
, coalesce(cs_latest_cycle_start_date, bw_latest_cycle_start_date) recurring_surveys_latest_cycle_start_date
, coalesce(cs_latest_cycle_end_date, bw_latest_cycle_end_date) recurring_surveys_latest_cycle_end_date
, coalesce(cs_latest_score_generated_date, bw_latest_score_generated_date) recurring_surveys_latest_score_generated_date
, coalesce(cs_latest_scores_report_created_date, bw_latest_scores_report_created_date) recurring_surveys_latest_scores_report_created_date
, cx_usage.cx_enabled_at
, plt_initial_migration_to_personasV2_at
, CASE
WHEN update_date >= plt_initial_migration_to_personasV2_at THEN 'Version 2'
ELSE 'Version 1' END plt__customer_personas_status
, MAX(date_submissions) OVER (PARTITION BY customer_id ORDER BY update_date ASC ROWS UNBOUNDED PRECEDING) pulse_last_submission
, MAX(insight_date) OVER (PARTITION BY customer_id ORDER BY update_date ASC ROWS UNBOUNDED PRECEDING) insights_last_published
, users.id user_id, business_attributes.id sf_contact_id, concat(users.firstname, ' ', users.lastname) user_name, fulltitle user_full_title, "date"(users.createdat) user_created_at
, array_join(departments, ', ') user_old_departments, persona user_old_persona
, organizationalrole user_organizational_role, departmentposition user_department_position, array_join(users.responsibilities, ', ') user_responsibilities, array_join(usecases, ', ') user_usecases
, depts.id department_id, array_join(depts.responsibilities, ', ') department_responsibilities, depts.name department_name
, CASE WHEN business_attributes.product_champion_test_c IS NOT NULL THEN 1 ELSE 0 END user_is_champion
, CASE WHEN business_attributes.product_dm_test_c IS NOT NULL THEN 1 ELSE 0 END user_is_dm
, CASE WHEN plt_daily_activity_type = 'Platform Usage' THEN 'Platform Usage'
WHEN plt_daily_activity_type = 'Email Usage' THEN 'Email Usage'
ELSE 'No Usage' END plt_daily_activity_type
, SUM(CASE WHEN plt_daily_activity_type in ('Platform Usage', 'Email Usage') THEN 1 ELSE 0 END) OVER (PARTITION BY users.id ORDER BY update_date DESC ROWS BETWEEN CURRENT ROW AND 90 FOLLOWING) AS plt_total_days_of_activity_in_90_days
, plt_personas_user_migration_at
, CASE
WHEN update_date >= plt_personas_user_migration_at THEN 1
ELSE 0 END plt_user_migrated_to_personasV2
, user_plat_usage_total_of_3_months
, users_activity.organic_platform_visited
, users_activity.organic_post_completed
, users_activity.organic_post_text_auto_generated
, users_activity.organic_analytics_tab_tracked
, users_activity.organic_news_feed_page_viewed
, users_activity.organic_inbox_page_viewed
, users_activity.organic_analytics_report_created
, users_activity.organic_news_tracked
, users_activity.organic_news_report_created
, users_activity.organic_news_report_viewed
, users_activity.organic_media_mentions_delivered_user_id
, users_activity.organic_project_followed
, users_activity.organic_report_created
, users_activity.organic_scheduled_report_created
, users_activity.organic_scheduled_news_report_created
, users_activity.organic_report_shared
, users_activity.organic_subscription_created
, users_activity.organic_source_created
, users_activity.organic_social_account_created
, users_activity.organic_independent_acttion_ocurred
, users_activity.organic_nextdoor_post_created
, first_actions.first_organic_platform_visit_user
, first_actions.first_project_creation_date
, first_actions.first_project_follow_date
, first_actions.first_report_creation_date
, first_actions.first_subscription_creation_date
, first_actions.first_source_creation_date
, first_actions.first_social_account_connected
, first_actions.first_independent_action
, "date_diff"('day', first_actions.first_organic_platform_visit_user, first_actions.first_project_creation_date) organic_activation_project_creation
, "date_diff"('day', first_actions.first_organic_platform_visit_user, first_actions.first_project_follow_date) organic_activation_project_follow
, "date_diff"('day', first_actions.first_organic_platform_visit_user, first_actions.first_subscription_creation_date) organic_activation_subscription_creation
, "date_diff"('day', first_actions.first_organic_platform_visit_user, first_actions.first_source_creation_date) organic_activation_source_creation
, "date_diff"('day', first_actions.first_organic_platform_visit_user, first_actions.first_social_account_connected) organic_activation_social_account_connection
, "date_diff"('day', first_actions.first_organic_platform_visit_user, first_actions.first_independent_action) organic_activation_independent_action
, organic_project_creation_completed
, "date_diff"('day', first_actions.first_organic_platform_visit_user, first_actions.first_report_creation_date) organic_activation_report_creation
, users_activity.cs_platform_visited
, first_actions.cs_first_platform_visit_user
, users_activity.cs_results_platform_viewed
, users_activity.cs_feed_platform_viewed
, users_activity.cs_results_summary_tab_viewed
, users_activity.cs_results_map_tab_viewed
, users_activity.cs_analysis_tab_viewed
, cs_report_read
, coalesce(cs_report_read, bw_report_read) reccuring_surveys_report_read
, users_activity.bw_platform_visited
, first_actions.bw_first_platform_visit_user
, users_activity.bw_results_platform_viewed
, users_activity.bw_results_summary_tab_viewed
, users_activity.bw_results_analysis_tab_viewed
, users_activity.bw_results_map_tab_viewed
, users_activity.bw_feed_platform_viewed
, bw_report_read
, users_activity.cx_platform_visited
, users_activity.surveys_platform_visited
, users_activity.engage_platform_visited
, power_actions.p_health_surveys
, CASE WHEN power_actions.p_health_surveys >= 2 THEN 'High'
WHEN power_actions.p_health_surveys = 1 THEN 'Medium'
WHEN power_actions.p_health_surveys = 0 THEN 'Low'
ELSE 'No Data' END p_health_surveys_text
, power_actions.p_health_organic
, CASE WHEN power_actions.p_health_organic >= 20 THEN 'High'
WHEN power_actions.p_health_organic >= 2 THEN 'Medium'
WHEN power_actions.p_health_organic < 2 THEN 'Low'
ELSE 'No Data' END p_health_organic_text
, power_actions.p_health_engage
, CASE WHEN power_actions.p_health_engage >= 6 THEN 'High'
WHEN power_actions.p_health_engage >= 1 THEN 'Medium'
WHEN power_actions.p_health_engage = 0 THEN 'Low'
ELSE 'No Data' END p_health_engage_text
, COALESCE(users_activity.p_insights_total + users_activity.p_projects_organic_total + users_activity.p_publishing_total + users_activity.p_social_total + users_activity.p_news_total, 0) p_organic_total
, COALESCE(users_activity.p_dashboard_total + users_activity.p_surveyreports_total + users_activity.p_cx_results_exported, 0) p_surveys_total
, COALESCE(users_activity.p_engageprojects_total + users_activity.p_discussions_total + users_activity.p_publicboards_total + users_activity.p_engagements_total, 0) p_engage_total
, COALESCE(users_activity.p_builder_total + users_activity.p_library_total + users_activity.p_subscriptions_total, 0) p_platform_total
, users_activity.p_insights_total
, users_activity.p_publishing_total
, users_activity.p_social_total
, users_activity.p_news_total
, users_activity.p_dashboard_total
, users_activity.p_dashboard_blockwise
, users_activity.p_dashboard_cs
, users_activity.p_dashboard_pulse
, users_activity.p_dashboard_cx
, users_activity.p_surveyreports_total
, users_activity.p_surveyreports_blockwise
, users_activity.p_surveyreports_cs
, users_activity.p_surveyreports_pulse
, users_activity.p_cx_results_exported
, users_activity.p_engageprojects_total
, users_activity.p_discussions_total
, users_activity.p_publicboards_total
, users_activity.p_engagements_total
, users_activity.p_builder_total
, users_activity.p_library_total
, users_activity.p_subscriptions_total
, users_activity.p_ps_reports
, users_activity.pc_news_report
, users_activity.pc_news_summarize
, users_activity.pc_social_summarize
, users_activity.pc_publishing_reply
, users_activity.pc_dashboard_bw_scroll
, users_activity.pc_dashboard_cs_scroll
, users_activity.pc_dashboard_pulse_scroll
, users_activity.pc_dashboard_cx_scroll
, users_activity.pc_surveyreports_created_bw
, users_activity.pc_surveyreports_created_cs
, users_activity.pc_surveyreports_external_clicked
, users_activity.pc_engagements_report
, users_activity.pc_engagements_publish
, users_activity.pc_engageprojects_emails
, users_activity.pc_assistant_feedback
, users_activity.pc_assistant_copied
, users_activity.pc_assistant_report
, users_activity.pc_notifications_clicked
, users_activity.pm_insights
, users_activity.pm_publishing
, users_activity.pm_social
, users_activity.pm_news
, users_activity.pm_dashboard
, users_activity.pm_surveyreports
, users_activity.pm_cx
, users_activity.pm_engageprojects
, users_activity.pm_discussions
, users_activity.pm_publicboards
, users_activity.pm_engagements
, users_activity.pm_library
, users_activity.pm_builder
, users_activity.pm_notifications
, users_activity.pm_assistant
, users_activity.kpi_social_highlight_clicked
, users_activity.kpi_social_highlight_new_clicked
, users_activity.kpi_projects_organic_used
, users_activity.kpi_organic_report_builder_reports
, 0 p_all_opened_in_source, 0 p_social_opened_in_source, 0 p_news_opened_in_source, 0 p_cx_dashboard
, 0 p_surveys_dashboard, 0 p_surveys_reports, 0 p_reports_blockwise, 0 p_reports_cs, 0 p_reports_pulse
, 0 pm_reports, 0 pc_reports_created_bw, 0 pc_reports_created_cs, 0 pc_reports_external_clicked, 0 p_projects_organic_total, 0 pm_projects_organic
FROM
"product_analytics_krs_client_contract_and_setup_over_time" customer_data
LEFT JOIN (
SELECT update_date update_date_users, users.*
FROM "customer_users_filtered_view" users
CROSS JOIN time_series_daily_since_oct_2022
WHERE date(createdat) <= update_date
AND (isdeactivated <> True OR (isdeactivated = True AND date(updatedat) >= update_date))
) users ON ("customer_id" = "customerid" AND update_date=update_date_users)
LEFT JOIN "platform_departments" depts ON (depts.id = users.departmentid)
LEFT JOIN "salesforce_contacts" business_attributes ON (users.id = user_platform_id_c)
LEFT JOIN (
SELECT update_date survey_cycles_update_date, customer_id survey_cycles_customer_id
, MAX(CASE WHEN survey_type = 'blockwise' THEN start_date ELSE NULL END) bw_latest_cycle_start_date
, MAX(CASE WHEN survey_type = 'blockwise' THEN end_date ELSE NULL END) bw_latest_cycle_end_date
, MAX(CASE WHEN survey_type = 'blockwise' THEN created_at ELSE NULL END) bw_latest_score_generated_date
, MAX(CASE WHEN survey_type = 'community_survey' THEN start_date ELSE NULL END) cs_latest_cycle_start_date
, MAX(CASE WHEN survey_type = 'community_survey' THEN end_date ELSE NULL END) cs_latest_cycle_end_date
, MAX(CASE WHEN survey_type = 'community_survey' THEN created_at ELSE NULL END) cs_latest_score_generated_date
FROM (
SELECT DISTINCT update_date, customer_id, survey_type, start_date, end_date, date(created_at) created_at
FROM survey_rake_weighter_executions rake
INNER JOIN surveys_daily_submissions_aggregations_view sub ON rake.survey_group_id = sub.survey_group_id
CROSS JOIN time_series_daily_since_oct_2022
WHERE display_on_dashboard = true
AND survey_type in ('blockwise', 'community_survey')
AND update_date >= date(created_at)
)
GROUP BY update_date, customer_id
) surveys_scores_generation ON (update_date = survey_cycles_update_date AND customer_id = survey_cycles_customer_id)
LEFT JOIN (
SELECT update_date bw_report_created_update_date, client, type report_created_type, min(createddate) bw_latest_scores_report_created_date
FROM(
SELECT DISTINCT update_date, client, type, createddate
FROM "reportslibrary"
CROSS JOIN time_series_daily_since_oct_2022
WHERE type = 'blockwise' AND (title NOT LIKE '%Live Feed Roundup%')
AND isdeleted <> true
AND update_date <= createddate
)
GROUP BY update_date, client, type
) surveys_report_creation_bw ON (bw_latest_score_generated_date = bw_report_created_update_date AND customer_id = surveys_report_creation_bw.client)
LEFT JOIN (
SELECT update_date cs_report_created_update_date, client, type report_created_type, min(createddate) cs_latest_scores_report_created_date
FROM(
SELECT DISTINCT update_date, client, type, createddate
FROM "reportslibrary"
CROSS JOIN time_series_daily_since_oct_2022
WHERE type = 'community_survey' AND (title NOT LIKE '%Live Feed Roundup%')
AND isdeleted <> true
AND update_date <= createddate
)
GROUP BY update_date, client, type
) surveys_report_creation_cs ON (cs_latest_score_generated_date = cs_report_created_update_date AND customer_id = surveys_report_creation_cs.client)
LEFT JOIN first_user_actions_helper_view first_actions ON users.id = first_actions.user_id
LEFT JOIN user_actions_helper_view users_activity ON (update_date = activity_date AND users.id = users_activity.user_id)
LEFT JOIN (
SELECT DISTINCT user_id, type report_read_type, date(event_date) cs_report_read_date, 1 cs_report_read
FROM "amplitude_events_customer_users_only"
INNER JOIN "reportslibrary" ON event_properties_filename = reportfd
WHERE type = 'community_survey'
AND event_type = 'report-library-item-accessed'
UNION
SELECT DISTINCT user_id, type report_read_type, date(event_date) cs_report_read_date, 1 cs_report_read
FROM "amplitude_events_customer_users_only"
INNER JOIN "reportslibrary" ON event_properties_itemid = reportslibrary.id
WHERE type = 'community_survey'
AND event_type = 'reports-report-viewed'
) surveys_report_read_cs ON (update_date = cs_report_read_date AND users.id = surveys_report_read_cs.user_id)
LEFT JOIN (
SELECT DISTINCT user_id, type report_read_type, date(event_date) bw_report_read_date, 1 bw_report_read
FROM "amplitude_events_customer_users_only"
INNER JOIN "reportslibrary" ON event_properties_filename = reportfd
WHERE type = 'blockwise'
AND event_type = 'report-library-item-accessed'
UNION
SELECT DISTINCT user_id, type report_read_type, date(event_date) bw_report_read_date, 1 bw_report_read
FROM "amplitude_events_customer_users_only"
INNER JOIN "reportslibrary" ON event_properties_itemid = reportslibrary.id
WHERE type = 'blockwise'
AND event_type = 'reports-report-viewed'
) surveys_report_read_bw ON (update_date = bw_report_read_date AND users.id = surveys_report_read_bw.user_id)
LEFT JOIN (
SELECT
coalesce(plat_usage_date, email_usage_date) activity_type_date
, coalesce(user_id_plat, user_id_email) user_id_usage
, CASE
WHEN plat_usage is not NULL THEN plat_usage
WHEN email_usage is not NULL THEN email_usage
ELSE NULL END plt_daily_activity_type
FROM (
SELECT *
FROM (
SELECT DISTINCT "date"(event_date) plat_usage_date, user_id user_id_plat, 'Platform Usage' plat_usage
FROM "amplitude_events_customer_users_only"
WHERE event_type in ('Page Changed', 'surveys-screen-viewed', 'engage-screen-loaded')
)
FULL JOIN (
SELECT DISTINCT "date"(event_date) email_usage_date, user_id user_id_email, 'Email Usage' email_usage
FROM "amplitude_events_customer_users_only"
WHERE event_type in ('mail-clicked', 'mail-opened')
AND event_properties_publicationtype <> 'insightsUserWelcomeEmail'
) email_usage_df ON (plat_usage_date = email_usage_date AND user_id_plat = user_id_email)
)
)  activity_type ON ((update_date = activity_type_date) AND (users.id = user_id_usage))
LEFT JOIN (
SELECT personas_customer_id, personas_user_id, plt_initial_migration_to_personasV2_at, min(personas_details_saved_date) plt_personas_user_migration_at
FROM (
SELECT personas_customer_id, personas_user_id, personas_details_saved_date
, min(personas_details_saved_date)  OVER (PARTITION BY personas_customer_id ORDER BY personas_customer_id) plt_initial_migration_to_personasV2_at
FROM(
SELECT customerid personas_customer_id, user_id personas_user_id, date(event_date) personas_details_saved_date
FROM amplitude_events_customer_users_only
WHERE event_type = 'profile-update-details-saved'
UNION
SELECT customerid personas_customer_id, id personas_user_id, updatedat personas_details_saved_date
FROM platform_users
WHERE organizationalrole is not null
)
)
GROUP BY personas_customer_id, personas_user_id, plt_initial_migration_to_personasV2_at
)  personas_migration_user ON (users.id = personas_user_id)
LEFT JOIN(
SELECT update_date update_date_maru, user_id user_id_maru, user_plat_usage_total_of_3_months
FROM (
SELECT update_date, year(update_date) year_2, month(update_date) month_2
FROM time_series_daily_since_oct_2022
)
LEFT JOIN (
SELECT *,
SUM(plat_usage) OVER (
PARTITION BY user_id
ORDER BY year ASC, month ASC
ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
) AS user_plat_usage_total_of_3_months
FROM (
SELECT year, month, user_id, max(plat_usage) plat_usage
FROM(
SELECT DISTINCT year(update_date) year, month(update_date) month, users.id user_id,
CASE WHEN plat_usage = 1 THEN 1 ELSE 0 END plat_usage
FROM platform_users users
CROSS JOIN time_series_daily_since_oct_2022
LEFT JOIN (
SELECT DISTINCT date(event_date) usage_date, user_id user_id_usage, 1 plat_usage
FROM amplitude_events_customer_users_only
WHERE event_type in ('Page Changed', 'surveys-screen-viewed', 'engage-screen-loaded')
) ON update_date = usage_date AND users.id = user_id_usage
)
GROUP BY year, month, user_id
)
) ON year_2 = year AND month_2 = month
) maru ON update_date = update_date_maru AND users.id = user_id_maru
LEFT JOIN (
SELECT
customers.customer_id customer_id_power,
customers.update_date update_date_power,
COALESCE(SUM(p_surveys_total_customer) OVER (PARTITION BY customers.customer_id ORDER BY customers.update_date DESC ROWS BETWEEN CURRENT ROW AND 182 FOLLOWING), 0) p_health_surveys,
COALESCE(SUM(p_organic_total_customer) OVER (PARTITION BY customers.customer_id ORDER BY customers.update_date DESC ROWS BETWEEN CURRENT ROW AND 61 FOLLOWING), 0) p_health_organic,
COALESCE(SUM(p_engage_total_customer) OVER (PARTITION BY customers.customer_id ORDER BY customers.update_date DESC ROWS BETWEEN CURRENT ROW AND 61 FOLLOWING), 0) p_health_engage
FROM (
SELECT
customer_id,
update_date
FROM
(
SELECT DISTINCT customer_id
FROM product_analytics_krs_client_contract_and_setup_over_time)
CROSS JOIN time_series_daily_since_oct_2022
) customers
LEFT JOIN (
SELECT
customerid,
activity_date,
sum(p_dashboard_total + p_surveyreports_total + p_cx_results_exported) p_surveys_total_customer,
sum(p_insights_total + p_projects_organic_total + p_publishing_total + p_social_total + p_news_total) p_organic_total_customer,
sum(p_engageprojects_total + p_discussions_total + p_publicboards_total + p_engagements_total) p_engage_total_customer
FROM user_actions_helper_view
GROUP BY customerid, activity_date
) actions ON (customers.customer_id = actions.customerid AND customers.update_date = activity_date)
) power_actions ON (update_date = update_date_power AND customer_id = customer_id_power)
LEFT JOIN (
SELECT
customerid cx_customerid
, date(createdat) cx_enabled_at
FROM
platform_customers_products
WHERE (product = 'cx-surveys')
) cx_usage ON (customer_id = cx_customerid)
LEFT JOIN (
SELECT
customer_id pulse_customer_id
, date_submissions
FROM surveys_daily_submissions_aggregations_view
WHERE (survey_type = 'pulse')
) pulse_data ON (update_date = date_submissions AND customer_id = pulse_customer_id)
LEFT JOIN (
SELECT
client insight_customer_id,
date(publishedat) insight_date
FROM reportslibrary
WHERE type IN ('insight', 'best_practices', 'executive', 'custom_engagement_report', 'custom_recurring')
UNION ALL
SELECT
client insight_customer_id,
date(publishedat) insight_date
FROM insights
) insights ON (customer_id = insight_customer_id AND update_date = insight_date)
WHERE 1=1
ORDER BY update_date, customer_name DESC
--</DBT_CODE>
--<ORIGINAL_CODE>
--SELECT
--
---- ##Customer Fields##
--  customer_data.*
--, MIN(first_actions.first_organic_platform_visit_user) OVER (PARTITION BY customer_id) organic_first_documented_action_at
--, MIN(first_actions.bw_first_platform_visit_user) OVER (PARTITION BY customer_id) bw_first_documented_action_at
--, MIN(first_actions.cs_first_platform_visit_user) OVER (PARTITION BY customer_id) cs_first_documented_action_at
--, MIN(first_actions.first_engage_action) OVER (PARTITION BY customer_id) engage_first_documented_action_at
--, bw_latest_cycle_start_date
--, bw_latest_cycle_end_date
--, bw_latest_score_generated_date
--, bw_latest_scores_report_created_date
--, cs_latest_cycle_start_date
--, cs_latest_cycle_end_date
--, cs_latest_score_generated_date
--, cs_latest_scores_report_created_date
--, coalesce(cs_latest_cycle_start_date, bw_latest_cycle_start_date) recurring_surveys_latest_cycle_start_date
--, coalesce(cs_latest_cycle_end_date, bw_latest_cycle_end_date) recurring_surveys_latest_cycle_end_date
--, coalesce(cs_latest_score_generated_date, bw_latest_score_generated_date) recurring_surveys_latest_score_generated_date
--, coalesce(cs_latest_scores_report_created_date, bw_latest_scores_report_created_date) recurring_surveys_latest_scores_report_created_date
--, cx_usage.cx_enabled_at
--, plt_initial_migration_to_personasV2_at
--, CASE
--    WHEN update_date >= plt_initial_migration_to_personasV2_at THEN 'Version 2'
--    ELSE 'Version 1' END plt__customer_personas_status
--, MAX(date_submissions) OVER (PARTITION BY customer_id ORDER BY update_date ASC ROWS UNBOUNDED PRECEDING) pulse_last_submission
--, MAX(insight_date) OVER (PARTITION BY customer_id ORDER BY update_date ASC ROWS UNBOUNDED PRECEDING) insights_last_published
--
---- ## customer onboarding cohorts eg engage_onboarded_cohort
--    
---- ##User Fields##
--, users.id user_id, business_attributes.id sf_contact_id, concat(users.firstname, ' ', users.lastname) user_name, fulltitle user_full_title, "date"(users.createdat) user_created_at
--, array_join(departments, ', ') user_old_departments, persona user_old_persona
--, organizationalrole user_organizational_role, departmentposition user_department_position, array_join(users.responsibilities, ', ') user_responsibilities, array_join(usecases, ', ') user_usecases
--, depts.id department_id, array_join(depts.responsibilities, ', ') department_responsibilities, depts.name department_name
--, CASE WHEN business_attributes.product_champion_test_c IS NOT NULL THEN 1 ELSE 0 END user_is_champion
--, CASE WHEN business_attributes.product_dm_test_c IS NOT NULL THEN 1 ELSE 0 END user_is_dm
--
---- ## General Usage Fields ##
--, CASE WHEN plt_daily_activity_type = 'Platform Usage' THEN 'Platform Usage'
--   WHEN plt_daily_activity_type = 'Email Usage' THEN 'Email Usage'
--   ELSE 'No Usage' END plt_daily_activity_type
--, SUM(CASE WHEN plt_daily_activity_type in ('Platform Usage', 'Email Usage') THEN 1 ELSE 0 END) OVER (PARTITION BY users.id ORDER BY update_date DESC ROWS BETWEEN CURRENT ROW AND 90 FOLLOWING) AS plt_total_days_of_activity_in_90_days
--, plt_personas_user_migration_at
--, CASE
--    WHEN update_date >= plt_personas_user_migration_at THEN 1
--    ELSE 0 END plt_user_migrated_to_personasV2
--, user_plat_usage_total_of_3_months
--
---- ## Organic Usage Fields ##
--, users_activity.organic_platform_visited
--, users_activity.organic_post_completed
--, users_activity.organic_post_text_auto_generated
--, users_activity.organic_analytics_tab_tracked
--, users_activity.organic_news_feed_page_viewed
--, users_activity.organic_inbox_page_viewed
--, users_activity.organic_analytics_report_created
--, users_activity.organic_news_tracked
--, users_activity.organic_news_report_created
--, users_activity.organic_news_report_viewed
--, users_activity.organic_media_mentions_delivered_user_id
--, users_activity.organic_project_followed
--, users_activity.organic_report_created
--, users_activity.organic_scheduled_report_created
--, users_activity.organic_scheduled_news_report_created
--, users_activity.organic_report_shared
--, users_activity.organic_subscription_created
--, users_activity.organic_source_created
--, users_activity.organic_social_account_created
--, users_activity.organic_independent_acttion_ocurred
--, users_activity.organic_nextdoor_post_created
--, first_actions.first_organic_platform_visit_user
--, first_actions.first_project_creation_date
--, first_actions.first_project_follow_date
--, first_actions.first_report_creation_date
--, first_actions.first_subscription_creation_date
--, first_actions.first_source_creation_date
--, first_actions.first_social_account_connected
--, first_actions.first_independent_action
--, "date_diff"('day', first_actions.first_organic_platform_visit_user, first_actions.first_project_creation_date) organic_activation_project_creation
--, "date_diff"('day', first_actions.first_organic_platform_visit_user, first_actions.first_project_follow_date) organic_activation_project_follow
--, "date_diff"('day', first_actions.first_organic_platform_visit_user, first_actions.first_subscription_creation_date) organic_activation_subscription_creation
--, "date_diff"('day', first_actions.first_organic_platform_visit_user, first_actions.first_source_creation_date) organic_activation_source_creation
--, "date_diff"('day', first_actions.first_organic_platform_visit_user, first_actions.first_social_account_connected) organic_activation_social_account_connection
--, "date_diff"('day', first_actions.first_organic_platform_visit_user, first_actions.first_independent_action) organic_activation_independent_action
--, organic_project_creation_completed
--, "date_diff"('day', first_actions.first_organic_platform_visit_user, first_actions.first_report_creation_date) organic_activation_report_creation
--
---- ## CS Usage Fields ##
--, users_activity.cs_platform_visited
--, first_actions.cs_first_platform_visit_user
--, users_activity.cs_results_platform_viewed
--, users_activity.cs_feed_platform_viewed
--, users_activity.cs_results_summary_tab_viewed
--, users_activity.cs_results_map_tab_viewed
--, users_activity.cs_analysis_tab_viewed
--, cs_report_read
--, coalesce(cs_report_read, bw_report_read) reccuring_surveys_report_read
--
---- ## BW Usage Fields ##
--, users_activity.bw_platform_visited
--, first_actions.bw_first_platform_visit_user
--, users_activity.bw_results_platform_viewed
--, users_activity.bw_results_summary_tab_viewed
--, users_activity.bw_results_analysis_tab_viewed
--, users_activity.bw_results_map_tab_viewed
--, users_activity.bw_feed_platform_viewed
--, bw_report_read
--
---- ## Surveys Usage Fields ##
--, users_activity.cx_platform_visited
--, users_activity.surveys_platform_visited
--
---- ## Engage Usage Fields ##
--, users_activity.engage_platform_visited
--
----## Health score for power actions ##
--, power_actions.p_health_surveys
--, CASE WHEN power_actions.p_health_surveys >= 2 THEN 'High'
--    WHEN power_actions.p_health_surveys = 1 THEN 'Medium'
--    WHEN power_actions.p_health_surveys = 0 THEN 'Low'
--    ELSE 'No Data' END p_health_surveys_text
--, power_actions.p_health_organic
--, CASE WHEN power_actions.p_health_organic >= 20 THEN 'High'
--    WHEN power_actions.p_health_organic >= 2 THEN 'Medium'
--    WHEN power_actions.p_health_organic < 2 THEN 'Low'
--    ELSE 'No Data' END p_health_organic_text
--, power_actions.p_health_engage
--, CASE WHEN power_actions.p_health_engage >= 6 THEN 'High'
--    WHEN power_actions.p_health_engage >= 1 THEN 'Medium'
--    WHEN power_actions.p_health_engage = 0 THEN 'Low'
--    ELSE 'No Data' END p_health_engage_text
--
----## Power actions counters ##
---- product level --
--, COALESCE(users_activity.p_insights_total + users_activity.p_projects_organic_total + users_activity.p_publishing_total + users_activity.p_social_total + users_activity.p_news_total, 0) p_organic_total
--, COALESCE(users_activity.p_dashboard_total + users_activity.p_surveyreports_total + users_activity.p_cx_results_exported, 0) p_surveys_total
--, COALESCE(users_activity.p_engageprojects_total + users_activity.p_discussions_total + users_activity.p_publicboards_total + users_activity.p_engagements_total, 0) p_engage_total
--, COALESCE(users_activity.p_builder_total + users_activity.p_library_total + users_activity.p_subscriptions_total, 0) p_platform_total
--
---- feature group level--
--, users_activity.p_insights_total
--, users_activity.p_publishing_total
--, users_activity.p_social_total
--, users_activity.p_news_total
--, users_activity.p_dashboard_total
--, users_activity.p_dashboard_blockwise
--, users_activity.p_dashboard_cs
--, users_activity.p_dashboard_pulse
--, users_activity.p_dashboard_cx
--, users_activity.p_surveyreports_total
--, users_activity.p_surveyreports_blockwise
--, users_activity.p_surveyreports_cs
--, users_activity.p_surveyreports_pulse
--, users_activity.p_cx_results_exported
--, users_activity.p_engageprojects_total
--, users_activity.p_discussions_total
--, users_activity.p_publicboards_total
--, users_activity.p_engagements_total
--, users_activity.p_builder_total
--, users_activity.p_library_total
--, users_activity.p_subscriptions_total
--
---- team level --
--, users_activity.p_ps_reports
--
----## Candidate counters for power actions ##
--, users_activity.pc_news_report
--, users_activity.pc_news_summarize
--, users_activity.pc_social_summarize
--, users_activity.pc_publishing_reply
--, users_activity.pc_dashboard_bw_scroll
--, users_activity.pc_dashboard_cs_scroll
--, users_activity.pc_dashboard_pulse_scroll
--, users_activity.pc_dashboard_cx_scroll
--, users_activity.pc_surveyreports_created_bw
--, users_activity.pc_surveyreports_created_cs
--, users_activity.pc_surveyreports_external_clicked
--, users_activity.pc_engagements_report
--, users_activity.pc_engagements_publish
--, users_activity.pc_engageprojects_emails
--, users_activity.pc_assistant_feedback
--, users_activity.pc_assistant_copied
--, users_activity.pc_assistant_report
--, users_activity.pc_notifications_clicked
--
----## Mid-funnel counters for power actions ##
--, users_activity.pm_insights
--, users_activity.pm_publishing
--, users_activity.pm_social
--, users_activity.pm_news
--, users_activity.pm_dashboard
--, users_activity.pm_surveyreports
--, users_activity.pm_cx
--, users_activity.pm_engageprojects
--, users_activity.pm_discussions
--, users_activity.pm_publicboards
--, users_activity.pm_engagements
--, users_activity.pm_library
--, users_activity.pm_builder
--, users_activity.pm_notifications
--, users_activity.pm_assistant
--
----## KPI counters counters for power actions ##
--, users_activity.kpi_social_highlight_clicked
--, users_activity.kpi_social_highlight_new_clicked
--, users_activity.kpi_projects_organic_used
--, users_activity.kpi_organic_report_builder_reports
--
----## old power actions metrics kept for quicksight integrity only ## --
--, 0 p_all_opened_in_source, 0 p_social_opened_in_source, 0 p_news_opened_in_source, 0 p_cx_dashboard
--, 0 p_surveys_dashboard, 0 p_surveys_reports, 0 p_reports_blockwise, 0 p_reports_cs, 0 p_reports_pulse
--, 0 pm_reports, 0 pc_reports_created_bw, 0 pc_reports_created_cs, 0 pc_reports_external_clicked, 0 p_projects_organic_total, 0 pm_projects_organic
--
--FROM
---- ##Customer & Users Data##
--  "product_analytics_krs_client_contract_and_setup_over_time" customer_data
--LEFT JOIN (
--    SELECT update_date update_date_users, users.*
--    FROM "customer_users_filtered_view" users
--    CROSS JOIN time_series_daily_since_oct_2022
--    WHERE date(createdat) <= update_date
--        AND (isdeactivated <> True OR (isdeactivated = True AND date(updatedat) >= update_date))
--) users ON ("customer_id" = "customerid" AND update_date=update_date_users)
--LEFT JOIN "platform_departments" depts ON (depts.id = users.departmentid)
--LEFT JOIN "salesforce_contacts" business_attributes ON (users.id = user_platform_id_c)
--LEFT JOIN (
--        SELECT update_date survey_cycles_update_date, customer_id survey_cycles_customer_id
--            , MAX(CASE WHEN survey_type = 'blockwise' THEN start_date ELSE NULL END) bw_latest_cycle_start_date
--            , MAX(CASE WHEN survey_type = 'blockwise' THEN end_date ELSE NULL END) bw_latest_cycle_end_date
--            , MAX(CASE WHEN survey_type = 'blockwise' THEN created_at ELSE NULL END) bw_latest_score_generated_date
--            , MAX(CASE WHEN survey_type = 'community_survey' THEN start_date ELSE NULL END) cs_latest_cycle_start_date
--            , MAX(CASE WHEN survey_type = 'community_survey' THEN end_date ELSE NULL END) cs_latest_cycle_end_date
--            , MAX(CASE WHEN survey_type = 'community_survey' THEN created_at ELSE NULL END) cs_latest_score_generated_date
--        FROM (
--            SELECT DISTINCT update_date, customer_id, survey_type, start_date, end_date, date(created_at) created_at
--            FROM survey_rake_weighter_executions rake
--            INNER JOIN surveys_daily_submissions_aggregations_view sub ON rake.survey_group_id = sub.survey_group_id
--            CROSS JOIN time_series_daily_since_oct_2022
--            WHERE display_on_dashboard = true
--            AND survey_type in ('blockwise', 'community_survey')
--            AND update_date >= date(created_at)
--        )
--        GROUP BY update_date, customer_id
--) surveys_scores_generation ON (update_date = survey_cycles_update_date AND customer_id = survey_cycles_customer_id)
--LEFT JOIN (
--    SELECT update_date bw_report_created_update_date, client, type report_created_type, min(createddate) bw_latest_scores_report_created_date
--    FROM(
--        SELECT DISTINCT update_date, client, type, createddate
--        FROM "reportslibrary" 
--        CROSS JOIN time_series_daily_since_oct_2022
--        WHERE type = 'blockwise' AND (title NOT LIKE '%Live Feed Roundup%')
--        AND isdeleted <> true
--        AND update_date <= createddate
--        )
--    GROUP BY update_date, client, type
--    ) surveys_report_creation_bw ON (bw_latest_score_generated_date = bw_report_created_update_date AND customer_id = surveys_report_creation_bw.client)
--LEFT JOIN (
--    SELECT update_date cs_report_created_update_date, client, type report_created_type, min(createddate) cs_latest_scores_report_created_date
--    FROM(
--        SELECT DISTINCT update_date, client, type, createddate
--        FROM "reportslibrary" 
--        CROSS JOIN time_series_daily_since_oct_2022
--        WHERE type = 'community_survey' AND (title NOT LIKE '%Live Feed Roundup%')
--        AND isdeleted <> true
--        AND update_date <= createddate
--        )
--    GROUP BY update_date, client, type
--    ) surveys_report_creation_cs ON (cs_latest_score_generated_date = cs_report_created_update_date AND customer_id = surveys_report_creation_cs.client)
--
--
---- ## FIRST ACTIONS PER USER (USER ACTIVATION) ##
--LEFT JOIN first_user_actions_helper_view first_actions ON users.id = first_actions.user_id
--LEFT JOIN user_actions_helper_view users_activity ON (update_date = activity_date AND users.id = users_activity.user_id)
--
---- ## Surveys Report Seen ##
--LEFT JOIN (
--    SELECT DISTINCT user_id, type report_read_type, date(event_date) cs_report_read_date, 1 cs_report_read
--        FROM "amplitude_events_customer_users_only" 
--        INNER JOIN "reportslibrary" ON event_properties_filename = reportfd
--        WHERE type = 'community_survey'
--        AND event_type = 'report-library-item-accessed'
--    UNION
--    SELECT DISTINCT user_id, type report_read_type, date(event_date) cs_report_read_date, 1 cs_report_read
--        FROM "amplitude_events_customer_users_only" 
--        INNER JOIN "reportslibrary" ON event_properties_itemid = reportslibrary.id
--        WHERE type = 'community_survey'
--        AND event_type = 'reports-report-viewed' 
--    ) surveys_report_read_cs ON (update_date = cs_report_read_date AND users.id = surveys_report_read_cs.user_id)
--LEFT JOIN (
--    SELECT DISTINCT user_id, type report_read_type, date(event_date) bw_report_read_date, 1 bw_report_read
--        FROM "amplitude_events_customer_users_only" 
--        INNER JOIN "reportslibrary" ON event_properties_filename = reportfd
--        WHERE type = 'blockwise'
--        AND event_type = 'report-library-item-accessed'
--    UNION
--    SELECT DISTINCT user_id, type report_read_type, date(event_date) bw_report_read_date, 1 bw_report_read
--        FROM "amplitude_events_customer_users_only" 
--        INNER JOIN "reportslibrary" ON event_properties_itemid = reportslibrary.id
--        WHERE type = 'blockwise'
--        AND event_type = 'reports-report-viewed' 
--    ) surveys_report_read_bw ON (update_date = bw_report_read_date AND users.id = surveys_report_read_bw.user_id)
--    
---- ### General Usage Data ###
--LEFT JOIN (
--    SELECT
--     coalesce(plat_usage_date, email_usage_date) activity_type_date
--   , coalesce(user_id_plat, user_id_email) user_id_usage
--   , CASE
--        WHEN plat_usage is not NULL THEN plat_usage
--        WHEN email_usage is not NULL THEN email_usage
--        ELSE NULL END plt_daily_activity_type
--    FROM (
--        SELECT * 
--        FROM (
--            SELECT DISTINCT "date"(event_date) plat_usage_date, user_id user_id_plat, 'Platform Usage' plat_usage
--            FROM "amplitude_events_customer_users_only"
--            WHERE event_type in ('Page Changed', 'surveys-screen-viewed', 'engage-screen-loaded')
--        ) 
--        FULL JOIN (
--            SELECT DISTINCT "date"(event_date) email_usage_date, user_id user_id_email, 'Email Usage' email_usage
--            FROM "amplitude_events_customer_users_only"
--            WHERE event_type in ('mail-clicked', 'mail-opened') 
--            AND event_properties_publicationtype <> 'insightsUserWelcomeEmail'
--        ) email_usage_df ON (plat_usage_date = email_usage_date AND user_id_plat = user_id_email)
--    )
--)  activity_type ON ((update_date = activity_type_date) AND (users.id = user_id_usage))
--
--
--LEFT JOIN (
--   SELECT personas_customer_id, personas_user_id, plt_initial_migration_to_personasV2_at, min(personas_details_saved_date) plt_personas_user_migration_at
--   FROM (
--   SELECT personas_customer_id, personas_user_id, personas_details_saved_date
--    , min(personas_details_saved_date)  OVER (PARTITION BY personas_customer_id ORDER BY personas_customer_id) plt_initial_migration_to_personasV2_at
--   FROM(
--    SELECT customerid personas_customer_id, user_id personas_user_id, date(event_date) personas_details_saved_date
--    FROM amplitude_events_customer_users_only
--    WHERE event_type = 'profile-update-details-saved'
--    UNION
--    SELECT customerid personas_customer_id, id personas_user_id, updatedat personas_details_saved_date
--    FROM platform_users
--    WHERE organizationalrole is not null
--   )
--   )
--   GROUP BY personas_customer_id, personas_user_id, plt_initial_migration_to_personasV2_at
--)  personas_migration_user ON (users.id = personas_user_id)
--
--
--LEFT JOIN(
--    SELECT update_date update_date_maru, user_id user_id_maru, user_plat_usage_total_of_3_months
--    FROM (
--        SELECT update_date, year(update_date) year_2, month(update_date) month_2
--        FROM time_series_daily_since_oct_2022
--    )
--    LEFT JOIN (
--        SELECT *, 
--            SUM(plat_usage) OVER (
--                PARTITION BY user_id
--                ORDER BY year ASC, month ASC
--                ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
--            ) AS user_plat_usage_total_of_3_months
--        FROM (
--            SELECT year, month, user_id, max(plat_usage) plat_usage
--            FROM(
--                SELECT DISTINCT year(update_date) year, month(update_date) month, users.id user_id, 
--                    CASE WHEN plat_usage = 1 THEN 1 ELSE 0 END plat_usage
--                FROM platform_users users
--                CROSS JOIN time_series_daily_since_oct_2022
--                LEFT JOIN (
--                    SELECT DISTINCT date(event_date) usage_date, user_id user_id_usage, 1 plat_usage
--                    FROM amplitude_events_customer_users_only
--                    WHERE event_type in ('Page Changed', 'surveys-screen-viewed', 'engage-screen-loaded')
--                ) ON update_date = usage_date AND users.id = user_id_usage
--            )
--        GROUP BY year, month, user_id
--        )
--    ) ON year_2 = year AND month_2 = month
--) maru ON update_date = update_date_maru AND users.id = user_id_maru
--
--
--LEFT JOIN (
--    SELECT
--        customers.customer_id customer_id_power,
--        customers.update_date update_date_power,
--        --COALESCE(SUM(p_surveys_total_customer) OVER (PARTITION BY customers.customer_id ORDER BY customers.update_date DESC ROWS BETWEEN CURRENT ROW AND 61 FOLLOWING), 0) p_health_surveys,
--        COALESCE(SUM(p_surveys_total_customer) OVER (PARTITION BY customers.customer_id ORDER BY customers.update_date DESC ROWS BETWEEN CURRENT ROW AND 182 FOLLOWING), 0) p_health_surveys,
--        COALESCE(SUM(p_organic_total_customer) OVER (PARTITION BY customers.customer_id ORDER BY customers.update_date DESC ROWS BETWEEN CURRENT ROW AND 61 FOLLOWING), 0) p_health_organic,
--        COALESCE(SUM(p_engage_total_customer) OVER (PARTITION BY customers.customer_id ORDER BY customers.update_date DESC ROWS BETWEEN CURRENT ROW AND 61 FOLLOWING), 0) p_health_engage
--    FROM (
--        SELECT
--            customer_id,
--            update_date
--        FROM 
--            (
--            SELECT DISTINCT customer_id 
--            FROM product_analytics_krs_client_contract_and_setup_over_time)
--            CROSS JOIN time_series_daily_since_oct_2022
--    ) customers
--    LEFT JOIN (
--        SELECT 
--            customerid,
--            activity_date,
--            sum(p_dashboard_total + p_surveyreports_total + p_cx_results_exported) p_surveys_total_customer,
--            sum(p_insights_total + p_projects_organic_total + p_publishing_total + p_social_total + p_news_total) p_organic_total_customer,
--            sum(p_engageprojects_total + p_discussions_total + p_publicboards_total + p_engagements_total) p_engage_total_customer
--        FROM user_actions_helper_view
--        GROUP BY customerid, activity_date
--    ) actions ON (customers.customer_id = actions.customerid AND customers.update_date = activity_date) 
--) power_actions ON (update_date = update_date_power AND customer_id = customer_id_power)
--
--LEFT JOIN (
--    SELECT
--         customerid cx_customerid
--       , date(createdat) cx_enabled_at
--    FROM
--     platform_customers_products
--    WHERE (product = 'cx-surveys')
--) cx_usage ON (customer_id = cx_customerid)
--
--LEFT JOIN (
--    SELECT
--         customer_id pulse_customer_id
--        , date_submissions
--    FROM surveys_daily_submissions_aggregations_view
--    WHERE (survey_type = 'pulse')
--) pulse_data ON (update_date = date_submissions AND customer_id = pulse_customer_id)
--
--LEFT JOIN (
--  SELECT 
--    client insight_customer_id,
--    date(publishedat) insight_date
--  FROM reportslibrary
--  WHERE type IN ('insight', 'best_practices', 'executive', 'custom_engagement_report', 'custom_recurring')
--  UNION ALL
--  SELECT 
--    client insight_customer_id,
--    date(publishedat) insight_date
--  FROM insights
--) insights ON (customer_id = insight_customer_id AND update_date = insight_date)
--
--
--WHERE 1=1
--
----AND update_date = current_date --date('2023-05-29')
----   AND customer_data.survey_type is not null
----   AND cs_platform_visited is not nullasefasdfasdfasdf
--   
--ORDER BY update_date, customer_name DESC
--
--</ORIGINAL_CODE>